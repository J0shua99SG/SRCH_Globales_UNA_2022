--
-- Script was generated by Devart dbForge Studio 2022 for MySQL, Version 9.1.21.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 24/10/2022 20:05:52
-- Server version: 8.0.31
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

DROP DATABASE IF EXISTS dbglobal;

CREATE DATABASE dbglobal
CHARACTER SET utf8mb4
COLLATE utf8mb4_0900_ai_ci;

--
-- Set default database
--
USE dbglobal;

--
-- Create table `tabla_campus`
--
CREATE TABLE tabla_campus (
  IdCampus int NOT NULL AUTO_INCREMENT,
  Nombre varchar(50) NOT NULL,
  Sede varchar(100) NOT NULL,
  Direccion varchar(150) NOT NULL,
  Telefono varchar(50) DEFAULT NULL,
  PRIMARY KEY (IdCampus)
)
ENGINE = INNODB,
AUTO_INCREMENT = 16,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `sp_getall_campus`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_campus ()
BEGIN
  SELECT
    IdCampus,
    Nombre,
    Sede,
    direccion,
    Telefono
  FROM tabla_campus;
END
$$

--
-- Create procedure `sp_get_campus_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_campus_by_id (IN pIdCampus int)
BEGIN
  SELECT
    IdCampus,
    Nombre,
    Sede,
    direccion,
    Telefono
  FROM tabla_campus
  WHERE IdCampus = pIdCampus;
END
$$

--
-- Create procedure `sp_edit_campus`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_campus (IN pIdCampus int, IN pNombre varchar(50), IN pSede varchar(100), IN pDireccion varchar(150), IN pTelefono varchar(50))
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El nombre registrado ya existe';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdCampus IS NULL
    OR pNombre = ''
    OR pSede = ''
    OR pDireccion = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        Nombre
      FROM tabla_campus
      WHERE IdCampus = pIdCampus) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM tabla_campus
      WHERE LOWER(Nombre) = LOWER(pNombre)
      AND IdCampus != pIdCampus) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE tabla_campus
    SET Nombre = pNombre,
        Sede = pSede,
        Direccion = pDireccion,
        Telefono = pTelefono
    WHERE IdCampus = pIdCampus;
    SELECT
      DatosActualizado;
  END IF;


END
$$

--
-- Create procedure `sp_delete_campus`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_campus (IN pIdCampus int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE ErrorNotFound varchar(50) DEFAULT 'Dato no encontrado';
  IF NOT EXISTS (SELECT
        Nombre
      FROM tabla_campus
      WHERE IdCampus = pIdCampus) THEN
    SELECT
      ErrorNotFound;
  ELSE
    DELETE
      FROM tabla_campus
    WHERE IdCampus = pIdCampus;
    SELECT
      DatosEliminados;
  END IF;
END
$$

--
-- Create procedure `sp_create_campus`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_campus (IN pNombre varchar(50), IN pSede varchar(100), IN pDireccion varchar(150), IN pTelefono varchar(50))
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El registro ya existe';
  DECLARE DatosRegistrado varchar(50) DEFAULT 'Registrado correctamente';
  IF pNombre = ''
    OR pSede = ''
    OR pDireccion = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM tabla_campus
      WHERE LOWER(Nombre) = LOWER(pNombre)) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO tabla_campus (Nombre, Sede, Direccion, Telefono)
      VALUE (pNombre, pSede, pDireccion, pTelefono);
    SELECT
      DatosRegistrado;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_edificio`
--
CREATE TABLE tabla_edificio (
  IdEdificio int NOT NULL AUTO_INCREMENT,
  IdCampus int NOT NULL,
  Nombre varchar(50) NOT NULL,
  PRIMARY KEY (IdEdificio)
)
ENGINE = INNODB,
AUTO_INCREMENT = 11,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE tabla_edificio
ADD CONSTRAINT tabla_edificio_ibfk_1 FOREIGN KEY (IdCampus)
REFERENCES tabla_campus (IdCampus);

DELIMITER $$

--
-- Create procedure `sp_getall_edificio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_edificio ()
BEGIN
  SELECT
    te.IdEdificio,
    te.Nombre,
    te.IdCampus,
    tc.Nombre AS 'Campus',
    tc.Sede
  FROM tabla_edificio te,
       tabla_campus tc
  WHERE te.IdCampus = tc.IdCampus;
END
$$

--
-- Create procedure `sp_get_edificio_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_edificio_by_id (IN pIdEdificio int)
BEGIN
  SELECT
    te.IdEdificio,
    te.Nombre,
    te.IdCampus,
    tc.Nombre AS 'Campus',
    tc.Sede
  FROM tabla_edificio te,
       tabla_campus tc
  WHERE te.IdCampus = tc.IdCampus
  AND IdEdificio = pIdEdificio;
END
$$

--
-- Create procedure `sp_edit_edificio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_edificio (IN pIdEdificio int, IN pIdCampus int, IN pNombre varchar(50))
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El nombre registrado ya existe';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdEdificio IS NULL
    OR pIdEdificio IS NULL
    OR pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        Nombre
      FROM tabla_edificio
      WHERE IdEdificio = pIdEdificio) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM tabla_edificio
      WHERE LOWER(Nombre) = LOWER(pNombre)
      AND IdCampus = pIdCampus
      AND IdEdificio != pIdEdificio) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE tabla_edificio
    SET IdCampus = pIdCampus,
        Nombre = pNombre
    WHERE IdEdificio = pIdEdificio;
  END IF;

END
$$

--
-- Create procedure `sp_delete_edificio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_edificio (IN pIdEdificio int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE ErrorNotFound varchar(50) DEFAULT 'Dato no encontrado';
  IF NOT EXISTS (SELECT
        Nombre
      FROM tabla_edificio
      WHERE IdEdificio = pIdEdificio) THEN
    SELECT
      ErrorNotFound;
  ELSE
    DELETE
      FROM tabla_edificio
    WHERE IdEdificio = pIdEdificio;
    SELECT
      DatosEliminados;
  END IF;

END
$$

--
-- Create procedure `sp_create_edificio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_edificio (IN pIdCampus int, IN pNombre varchar(50))
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El registro ya existe';
  DECLARE DatosRegistrado varchar(50) DEFAULT 'Registrado correctamente';


  IF EXISTS (SELECT
        *
      FROM tabla_edificio
      WHERE IdCampus = pIdCampus
      AND Nombre = pNombre) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO tabla_edificio (IdCampus, Nombre)
      VALUE (pIdCampus, pNombre);
    SELECT
      DatosRegistrado;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_tipo_espacio`
--
CREATE TABLE tabla_tipo_espacio (
  IdTipoEspacio int NOT NULL AUTO_INCREMENT,
  Nombre varchar(50) NOT NULL,
  Descripcion varchar(200) DEFAULT NULL,
  PRIMARY KEY (IdTipoEspacio)
)
ENGINE = INNODB,
AUTO_INCREMENT = 8,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `sp_getall_tipo_espacio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_tipo_espacio ()
BEGIN
  SELECT
    IdTipoEspacio,
    Nombre,
    Descripcion
  FROM tabla_tipo_espacio;
END
$$

--
-- Create procedure `sp_get_tipo_espacio_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_tipo_espacio_by_id (IN pIdTipoEspacio int)
BEGIN
  SELECT
    IdTipoEspacio,
    Nombre,
    Descripcion
  FROM tabla_tipo_espacio
  WHERE IdTipoEspacio = pIdTipoEspacio;
END
$$

--
-- Create procedure `sp_edit_tipo_espacio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_tipo_espacio (IN pIdTipoEspacio int, IN pNombre varchar(50), IN pDescripcion varchar(200))
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El nombre registrado ya existe';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdTipoEspacio IS NULL
    OR pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        Nombre
      FROM tabla_tipo_espacio
      WHERE IdTipoEspacio = pIdTipoEspacio) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM tabla_tipo_espacio
      WHERE LOWER(Nombre) = LOWER(pNombre)
      AND IdTipoEspacio != pIdTipoEspacio) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE tabla_tipo_espacio
    SET Nombre = pNombre,
        Descripcion = pDescripcion
    WHERE IdTipoEspacio = pIdTipoEspacio;
  END IF;

END
$$

--
-- Create procedure `sp_delete_tipo_espacio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_tipo_espacio (IN pIdTipoEspacio int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado corractamente';
  DECLARE ErrorNotFound varchar(50) DEFAULT 'Dato no encontrado';
  IF NOT EXISTS (SELECT
        Nombre
      FROM tabla_tipo_espacio
      WHERE IdTipoEspacio = pIdTipoEspacio) THEN
    SELECT
      ErrorNotFound;
  ELSE
    DELETE
      FROM tabla_tipo_espacio
    WHERE IdTipoEspacio = pIdTipoEspacio;
    SELECT
      DatosEliminados;
  END IF;

END
$$

--
-- Create procedure `sp_create_tipo_espacio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_tipo_espacio (IN pNombre varchar(50), IN pDescripcion varchar(200))
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El registro ya existe';
  DECLARE DatosRegistrado varchar(50) DEFAULT 'Registrado correctamente';
  IF pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM tabla_tipo_espacio
      WHERE LOWER(Nombre) = LOWER(pNombre)) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO tabla_tipo_espacio (Nombre, Descripcion)
      VALUE (pNombre, pDescripcion);
    SELECT
      DatosRegistrado;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_departamento`
--
CREATE TABLE tabla_departamento (
  IdDepartamento int NOT NULL AUTO_INCREMENT,
  Nombre varchar(50) NOT NULL,
  PRIMARY KEY (IdDepartamento)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `sp_getall_departamento`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_departamento ()
BEGIN
  SELECT
    IdDepartamento,
    Nombre
  FROM tabla_Departamento;
END
$$

--
-- Create procedure `sp_get_departamento_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_departamento_by_id (IN pIdDepartamento int)
BEGIN
  SELECT
    IdDepartamento,
    Nombre
  FROM tabla_Departamento
  WHERE IdDepartamento = pIdDepartamento;
END
$$

--
-- Create procedure `sp_edit_departemento`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_departemento (IN pIdDepartamento int, IN pNombre varchar(50))
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El nombre registrado ya existe';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdDepartamento IS NULL
    OR pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        Nombre
      FROM tabla_departamento
      WHERE IdDepartamento = pIdDepartamento) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM tabla_departamento
      WHERE LOWER(Nombre) = LOWER(pNombre)
      AND IdDepartamento != pIdDepartamento) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE tabla_departamento
    SET Nombre = pNombre
    WHERE IdDepartamento = pIdDepartamento;
  END IF;


END
$$

--
-- Create procedure `sp_delete_departamento`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_departamento (IN pIdDepartamento int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE ErrorNotFound varchar(50) DEFAULT 'Dato no encontrado';
  IF NOT EXISTS (SELECT
        Nombre
      FROM tabla_departamento
      WHERE IdDepartamento = pIdDepartamento) THEN
    SELECT
      ErrorNotFound;
  ELSE
    DELETE
      FROM tabla_departamento
    WHERE IdDepartamento = pIdDepartamento;
    SELECT
      DatosEliminados;
  END IF;
END
$$

--
-- Create procedure `sp_create_departamento`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_departamento (IN pNombre varchar(50))
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El registro ya existe';
  DECLARE DatosRegistrado varchar(50) DEFAULT 'Registrado correctamente';
  IF pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM tabla_departamento
      WHERE LOWER(Nombre) = LOWER(pNombre)) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO tabla_departamento (Nombre)
      VALUE (pNombre);
    SELECT
      DatosRegistrado;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_espacio`
--
CREATE TABLE tabla_espacio (
  IdEspacio int NOT NULL AUTO_INCREMENT,
  IdEdificio int NOT NULL,
  IdTipoEspacio int NOT NULL,
  IdDepartamento int NOT NULL,
  Nombre varchar(100) DEFAULT NULL,
  Planta int NOT NULL,
  CapacidadMAx int DEFAULT NULL,
  EstadoEspacio tinyint(1) NOT NULL,
  PRIMARY KEY (IdEspacio)
)
ENGINE = INNODB,
AUTO_INCREMENT = 5,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE tabla_espacio
ADD CONSTRAINT tabla_espacio_ibfk_2 FOREIGN KEY (IdTipoEspacio)
REFERENCES tabla_tipo_espacio (IdTipoEspacio);

--
-- Create foreign key
--
ALTER TABLE tabla_espacio
ADD CONSTRAINT tabla_espacio_ibfk_3 FOREIGN KEY (IdDepartamento)
REFERENCES tabla_departamento (IdDepartamento);

--
-- Create foreign key
--
ALTER TABLE tabla_espacio
ADD CONSTRAINT tabla_espacio_ibfk_4 FOREIGN KEY (IdEdificio)
REFERENCES tabla_edificio (IdEdificio);

DELIMITER $$

--
-- Create procedure `sp_getall_espacio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_espacio ()
BEGIN
  SELECT
    te.IdEspacio,
    te.Nombre,
    te.IdEdificio,
    ted.Nombre AS 'Edificio',
    te.IdTipoEspacio,
    tte.Nombre AS 'Tipo Espacio',
    te.IdDepartamento,
    td.Nombre AS 'Departamento',
    te.Planta,
    te.CapacidadMAx,
    te.EstadoEspacio
  FROM tabla_espacio te,
       tabla_edificio ted,
       tabla_tipo_espacio tte,
       tabla_departamento td
  WHERE te.IdEdificio = ted.IdEdificio
  AND te.IdTipoEspacio = tte.IdTipoEspacio
  AND te.IdDepartamento = td.IdDepartamento;
END
$$

--
-- Create procedure `sp_get_espacio_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_espacio_by_id (IN pIdEspacio int)
BEGIN
  SELECT
    te.IdEspacio,
    te.Nombre,
    te.IdEdificio,
    ted.Nombre AS 'Edificio',
    te.IdTipoEspacio,
    tte.Nombre AS 'Tipo Espacio',
    te.IdDepartamento,
    td.Nombre AS 'Departamento',
    te.Planta,
    te.CapacidadMAx,
    te.EstadoEspacio
  FROM tabla_espacio te,
       tabla_edificio ted,
       tabla_tipo_espacio tte,
       tabla_departamento td
  WHERE te.IdEdificio = ted.IdEdificio
  AND te.IdTipoEspacio = tte.IdTipoEspacio
  AND te.IdDepartamento = td.IdDepartamento
  AND te.IdEspacio = pIdEspacio;
END
$$

--
-- Create procedure `sp_edit_espacio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_espacio (IN pIdEspacio int, IN pIdEdificio int, IN pIdTipoEspacio int, IN pIdDepartamento int, IN pNombre varchar(100), IN pPlanta int, IN pCapacidadMax int, IN pEstadoEspacio tinyint(1))
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El nombre registrado ya existe';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdEdificio IS NULL
    OR pIdTipoEspacio IS NULL
    OR pIdDepartamento IS NULL
    OR pPlanta IS NULL
    OR pEstadoEspacio IS NULL THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        Nombre
      FROM tabla_espacio
      WHERE IdEspacio = pIdEspacio) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM tabla_espacio
      WHERE LOWER(Nombre) = LOWER(pNombre)
      AND IdEdificio = pIdEdificio
      AND IdEspacio != pIdEspacio) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE tabla_espacio
    SET IdEdificio = pIdEdificio,
        IdTipoEspacio = pIdTipoEspacio,
        IdDepartamento = pIdDepartamento,
        Nombre = pNombre,
        Planta = pPlanta,
        CapacidadMAx = pCapacidadMax,
        EstadoEspacio = pEstadoEspacio
    WHERE IdEspacio = pIdEspacio;
    SELECT
      DatosActualizado;
  END IF;

END
$$

--
-- Create procedure `sp_delete_espacio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_espacio (IN pIdEspacio int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE ErrorNotFound varchar(50) DEFAULT 'Dato no encontrado';
  IF NOT EXISTS (SELECT
        Nombre
      FROM tabla_espacio
      WHERE IdEspacio = pIdEspacio) THEN
    SELECT
      ErrorNotFound;
  ELSE
    DELETE
      FROM tabla_espacio
    WHERE IdEspacio = pIdEspacio;
    SELECT
      DatosEliminados;
  END IF;
END
$$

--
-- Create procedure `sp_create_espacio`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_espacio (IN pIdEdificio int, IN pIdTipoEspacio int, IN pIdDepartamento int, IN pNombre varchar(100), IN pPlanta int, IN pCapacidadMax int, IN pEstadoEspacio tinyint(1))
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'El registro ya existe';
  DECLARE DatosRegistrado varchar(50) DEFAULT 'Registrado correctamente';
  IF pIdEdificio IS NULL
    OR pIdTipoEspacio IS NULL
    OR pIdDepartamento IS NULL
    OR pPlanta IS NULL
    OR pEstadoEspacio IS NULL THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM tabla_espacio te
      WHERE LOWER(Nombre) = LOWER(pNombre)
      AND IdEdificio = pIdEdificio) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO tabla_espacio (IdEdificio, IdTipoEspacio, IdDepartamento, Nombre, Planta, CapacidadMAx, EstadoEspacio)
      VALUE (pIdEdificio, pIdTipoEspacio, pIdDepartamento, pNombre, pPlanta, pCapacidadMax, pEstadoEspacio);
    SELECT
      DatosRegistrado;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_usuario`
--
CREATE TABLE tabla_usuario (
  IdUsuario int NOT NULL AUTO_INCREMENT,
  TipoUsuario varchar(50) NOT NULL,
  DNI varchar(100) NOT NULL,
  Nombre varchar(50) NOT NULL,
  Ape1 varchar(50) NOT NULL,
  Ape2 varchar(50) DEFAULT NULL,
  EmailInst varchar(100) DEFAULT NULL,
  Telefono varchar(50) DEFAULT NULL,
  Fecha_Nac date DEFAULT NULL,
  PRIMARY KEY (IdUsuario)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `sp_getall_tabla_usuario`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_tabla_usuario ()
BEGIN
  SELECT
    IdUsuario,
    TipoUsuario,
    Nombre,
    Ape1,
    Ape2,
    EmailInst,
    Telefono,
    Fecha_Nac
  FROM tabla_usuario;
END
$$

--
-- Create procedure `sp_get_usuario_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_usuario_by_id (IN pIdUsuario int)
BEGIN
  SELECT
    IdUsuario,
    TipoUsuario,
    Nombre,
    Ape1,
    Ape2,
    EmailInst,
    Telefono,
    Fecha_Nac
  FROM tabla_usuario
  WHERE IdUsuario = pIdUsuario;
END
$$

--
-- Create procedure `sp_get_usario_by_DNI`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_usario_by_DNI (IN pDNI varchar(100))
BEGIN
  SELECT
    IdUsuario,
    TipoUsuario,
    Nombre,
    Ape1,
    Ape2,
    EmailInst,
    Telefono,
    Fecha_Nac
  FROM tabla_usuario
  WHERE DNI = pDNI;
END
$$

--
-- Create procedure `sp_edit_usuario`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_usuario (IN pIdUsuario int, IN pTipoUsuario varchar(50), IN pDNI varchar(100), IN pNombre varchar(50), IN pApe1 varchar(50), IN pApe2 varchar(50), IN pEmailInst varchar(100), IN pTelefono varchar(50), IN pfecha_Nac date)
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'Ya existe un registro con ese DNI';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdUsuario IS NULL
    OR pTipoUsuario = ''
    OR pNombre = ''
    OR pApe1 = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        tu.IdUsuario
      FROM dbglobal.tabla_usuario tu
      WHERE tu.IdUsuario = pIdUsuario) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        DNI
      FROM dbglobal.tabla_usuario tu
      WHERE tu.DNI = pDNI
      AND tu.IdUsuario != pIdUsuario) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE dbglobal.tabla_usuario
    SET TipoUsuario = pTipoUsuario,
        DNI = pDNI,
        Nombre = pNombre,
        Ape1 = pApe1,
        Ape2 = pApe2,
        EmailInst = pEmailInst,
        Telefono = pTelefono,
        Fecha_Nac = pfecha_Nac
    WHERE IdUsuario = pIdUsuario;
    SELECT
      DatosActualizado;
  END IF;
END
$$

--
-- Create procedure `sp_delete_usuario`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_usuario (IN pIdUsuario int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';

  IF NOT EXISTS (SELECT
        tu.IdUsuario
      FROM dbglobal.tabla_usuario tu
      WHERE tu.IdUsuario = pIdUsuario) THEN
    SELECT
      DatoNotFound;
  ELSE
    DELETE
      FROM dbglobal.tabla_usuario
    WHERE IdUsuario = pIdUsuario;
    SELECT
      DatosEliminados;
  END IF;
END
$$

--
-- Create procedure `sp_create_usuario`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_usuario (IN pTipoUsuario varchar(50), IN pDNI varchar(100), IN pNombre varchar(50), IN pApe1 varchar(50), IN pApe2 varchar(50), IN pEmailInst varchar(100), IN pTelefono varchar(50), IN pfecha_Nac date)
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'registre los datos necesarios';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'registro ya existe';
  DECLARE DatosRegistrados varchar(50) DEFAULT 'registrado correctamente';
  IF pTipoUsuario = ''
    OR pDNI = ''
    OR pNombre = ''
    OR pApe1 = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF EXISTS (SELECT
        DNI
      FROM dbglobal.tabla_usuario tu
      WHERE DNI = pDNI) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO tabla_usuario (TipoUsuario, DNI, Nombre, Ape1, Ape2, EmailIsnt, Telefono, Fecha_Nac)
      VALUES (pTipoUsuario, pDNI, pNombre, pApe1, pApe2, pEmailInst, pTelefono, pFecha_Nac);
    SELECT
      DatosRegistrados;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_actividad`
--
CREATE TABLE tabla_actividad (
  IdActividad int NOT NULL AUTO_INCREMENT,
  TipoActividad varchar(50) NOT NULL,
  Nombre varchar(50) NOT NULL,
  Descripcion varchar(100) DEFAULT NULL,
  PRIMARY KEY (IdActividad)
)
ENGINE = INNODB,
AUTO_INCREMENT = 6,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `sp_getall_tabla_actividad`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_tabla_actividad ()
BEGIN
  SELECT
    IdActividad,
    TipoActividad,
    Nombre,
    Descripcion
  FROM tabla_actividad;
END
$$

--
-- Create procedure `sp_get_actividad_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_actividad_by_id (IN pIdActividad int)
BEGIN
  SELECT
    IdActividad,
    TipoActividad,
    Nombre,
    Descripcion
  FROM tabla_actividad
  WHERE IdActividad = pIdActividad;
END
$$

--
-- Create procedure `sp_edit_actividad`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_actividad (IN pIdActividad int, IN pTipoActividad varchar(50), IN pNombre varchar(50), IN pDescripcion varchar(100))
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'Ya existe un registro con un mismo nombre';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdActividad IS NULL
    OR pTipoActividad = ''
    OR pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        IdActividad
      FROM dbglobal.tabla_actividad
      WHERE IdActividad = pIdActividad) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM dbglobal.tabla_actividad
      WHERE LOWER(Nombre) = LOWER(pNombre)
      AND IdActividad != pIdActividad) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE dbglobal.tabla_actividad
    SET TipoActividad = pIdActividad,
        Nombre = pNombre,
        Descripcion = pDescripcion
    WHERE IdActividad = pIdActividad;
    SELECT
      DatosActualizado;
  END IF;

END
$$

--
-- Create procedure `sp_delete_actividad`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_actividad (IN pIdActividad int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';

  IF NOT EXISTS (SELECT
        IdActividad
      FROM dbglobal.tabla_actividad ta
      WHERE IdActividad = pIdActividad) THEN
    SELECT
      DatoNotFound;
  ELSE
    DELETE
      FROM tabla_actividad
    WHERE IdActividad = pIdActividad;
    SELECT
      DatosEliminados;
  END IF;

END
$$

--
-- Create procedure `sp_create_actividad`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_actividad (IN pTipoActividad varchar(50), IN pNombre varchar(50), IN pDescripcion varchar(100))
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'registre los datos necesarios';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'registro ya existe';
  DECLARE DatosRegistrados varchar(50) DEFAULT 'registrado correctamente';
  IF pTipoActividad = ''
    OR pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM dbglobal.tabla_actividad
      WHERE LOWER(Nombre) = LOWER(pNombre)) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO tabla_actividad (TipoActividad, Nombre, Descripcion)
      VALUES (pTipoActividad, pNombre, pDescripcion);
    SELECT
      DatosRegistrados;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_horario`
--
CREATE TABLE tabla_horario (
  IdHorario int NOT NULL AUTO_INCREMENT,
  IdUsuario int NOT NULL,
  IdActividad int NOT NULL,
  IdEspacio int NOT NULL,
  HoraInicio time NOT NULL,
  HoraFinalizacion time NOT NULL,
  FechaInicio date NOT NULL,
  FechaFin date DEFAULT NULL,
  Dia varchar(15) NOT NULL,
  Estado tinyint(1) DEFAULT NULL,
  FechaActivacion datetime DEFAULT NULL,
  PRIMARY KEY (IdHorario)
)
ENGINE = INNODB,
AUTO_INCREMENT = 9,
AVG_ROW_LENGTH = 2048,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE tabla_horario
ADD CONSTRAINT tabla_horario_ibfk_1 FOREIGN KEY (IdUsuario)
REFERENCES tabla_usuario (IdUsuario);

--
-- Create foreign key
--
ALTER TABLE tabla_horario
ADD CONSTRAINT tabla_horario_ibfk_2 FOREIGN KEY (IdActividad)
REFERENCES tabla_actividad (IdActividad);

--
-- Create foreign key
--
ALTER TABLE tabla_horario
ADD CONSTRAINT tabla_horario_ibfk_3 FOREIGN KEY (IdEspacio)
REFERENCES tabla_espacio (IdEspacio);

DELIMITER $$

--
-- Create procedure `sp_metodo_horario_validateExistencia_edit`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_metodo_horario_validateExistencia_edit (IN pIdHorario int, IN pfechaInicio date, IN pfechaFin date, IN pHoraInicio time, IN pHoraFin time, IN pIdEspacio int, IN pDia varchar(15), OUT estadoPrevio tinyint(1), OUT estadoActual tinyint(1), OUT estadoPosterior tinyint(1), OUT estadoGlobal tinyint(1))
BEGIN
  DECLARE FechaHoy date DEFAULT DATE(NOW());
  DECLARE FechaPrevio date DEFAULT DATE_SUB(pfechaInicio, INTERVAL 3 MONTH);
  DECLARE FechaPost date DEFAULT DATE_ADD(pfechaFin, INTERVAL 3 MONTH);
  DECLARE HoraPre time DEFAULT DATE_SUB(pHoraInicio, INTERVAL 5 HOUR);
  DECLARE HoraPost time DEFAULT DATE_ADD(pHoraFin, INTERVAL 5 HOUR);

  -- Previo fecha
  IF EXISTS (SELECT
        *
      FROM tabla_horario th
      WHERE th.IdHorario != pIdHorario
      AND th.IdEspacio = pIdEspacio
      AND LOWER(th.Dia) = LOWER(pDia)
      AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
      AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)) THEN
    -- Prev hora
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
      SET estadoPrevio = TRUE;
    -- Actual hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)
        AND th.HoraInicio >= pHoraInicio
        AND th.HoraFinalizacion <= pHoraFin) THEN
      SET estadoPrevio = TRUE;
    -- Posterior hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)
        AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoPrevio = TRUE;
    -- Pre act pos hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoPrevio = TRUE;
    ELSE
      SET estadoPrevio = FALSE;
    END IF;
  ELSE
    SET estadoPrevio = FALSE;
  END IF;

  -- Actual fecha
  IF EXISTS (SELECT
        *
      FROM tabla_horario th
      WHERE th.IdHorario != pIdHorario
      AND th.IdEspacio = pIdEspacio
      AND LOWER(th.Dia) = LOWER(pDia)
      AND th.FechaInicio >= pfechaInicio
      AND th.FechaFin <= pfechaFin) THEN
    -- Prev hora
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio >= pfechaInicio
        AND th.FechaFin <= pfechaFin
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
      SET estadoActual = TRUE;
    -- Actual hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio >= pfechaInicio
        AND th.FechaFin <= pfechaFin
        AND th.HoraInicio >= pHoraInicio
        AND th.HoraFinalizacion <= pHoraFin) THEN
      SET estadoActual = TRUE;
    -- Posterior hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio >= pfechaInicio
        AND th.FechaFin <= pfechaFin
        AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoActual = TRUE;
    -- Pre act pos hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio >= pfechaInicio
        AND th.FechaFin <= pfechaFin
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoActual = TRUE;
    ELSE
      SET estadoActual = FALSE;
    END IF;
  ELSE
    SET estadoActual = FALSE;
  END IF;
  -- Posterior
  IF EXISTS (SELECT
        *
      FROM tabla_horario th
      WHERE th.IdHorario != pIdHorario
      AND th.IdEspacio = pIdEspacio
      AND LOWER(th.Dia) = LOWER(pDia)
      AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
      AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)) THEN
    -- Prev hora
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
      SET estadoPosterior = TRUE;
    -- Actual hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND th.HoraInicio >= pHoraInicio
        AND th.HoraFinalizacion <= pHoraFin) THEN
      SET estadoPosterior = TRUE;
    -- Posterior hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoPosterior = TRUE;
    -- Pre act pos hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoPosterior = TRUE;

    ELSE
      SET estadoPosterior = FALSE;
    END IF;
  ELSE
    SET estadoPosterior = FALSE;
  END IF;

  -- Pre act pos
  IF EXISTS (SELECT
        *
      FROM tabla_horario th
      WHERE th.IdHorario != pIdHorario
      AND th.IdEspacio = pIdEspacio
      AND LOWER(th.Dia) = LOWER(pDia)
      AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
      AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)) THEN
    -- Prev hora
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
      SET estadoGlobal = TRUE;
    -- Actual hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND th.HoraInicio >= pHoraInicio
        AND th.HoraFinalizacion <= pHoraFin) THEN
      SET estadoGlobal = TRUE;
    -- Posterior hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoGlobal = TRUE;
    -- Pre act pos hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoGlobal = TRUE;
    ELSE
      SET estadoGlobal = FALSE;
    END IF;
  ELSE
    SET estadoGlobal = FALSE;
  END IF;

  -- Una fecha 
  IF pfechaInicio = pfechaFin THEN
    -- Global con solo una fecha
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdHorario != pIdHorario
        AND th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio = pfechaInicio) THEN

      IF EXISTS (SELECT
            *
          FROM tabla_horario th
          WHERE th.IdHorario != pIdHorario
          AND th.IdEspacio = pIdEspacio
          AND LOWER(th.Dia) = LOWER(pDia)
          AND th.FechaInicio = pfechaInicio
          AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
          AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
        SET estadoGlobal = TRUE;
      -- Actual hora
      ELSEIF EXISTS (SELECT
            *
          FROM tabla_horario th
          WHERE th.IdHorario != pIdHorario
          AND th.IdEspacio = pIdEspacio
          AND LOWER(th.Dia) = LOWER(pDia)
          AND th.FechaInicio = pfechaInicio
          AND th.HoraInicio >= pHoraInicio
          AND th.HoraFinalizacion <= pHoraFin) THEN
        SET estadoGlobal = TRUE;
      -- Posterior hora
      ELSEIF EXISTS (SELECT
            *
          FROM tabla_horario th
          WHERE th.IdHorario != pIdHorario
          AND th.IdEspacio = pIdEspacio
          AND LOWER(th.Dia) = LOWER(pDia)
          AND th.FechaInicio = pfechaInicio
          AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
          AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
        SET estadoGlobal = TRUE;
      -- Pre act pos hora
      ELSEIF EXISTS (SELECT
            *
          FROM tabla_horario th
          WHERE th.IdHorario != pIdHorario
          AND th.IdEspacio = pIdEspacio
          AND LOWER(th.Dia) = LOWER(pDia)
          AND th.FechaInicio = pfechaInicio
          AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
          AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
        SET estadoGlobal = TRUE;
      ELSE
        SET estadoGlobal = FALSE;
      END IF;
    ELSE
      SET estadoGlobal = FALSE;
    END IF;
  END IF;

--   SELECT
--     estadoPrevio,
--     estadoActual,
--     estadoPosterior,
--     estadoGlobal;
END
$$

--
-- Create procedure `sp_edit_horario`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_horario (IN pIdHorario int, IN pIdUsuario int, IN pIdActividad int, IN pIdEspacio int, IN pHoraInicio time, IN pHoraFinalizacion time, IN pFechaInicio date, IN pFechaFin date, IN pDia varchar(15), IN pEstado tinyint(1), IN pFechaActivacion datetime)
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesarios';
  DECLARE ErrorDatosExistentes varchar(80) DEFAULT 'Existen registros que impiden introducir la actividad al sistema.';
  DECLARE DatosRegistrados varchar(50) DEFAULT 'Registrado correctamente';
  DECLARE temp tinyint DEFAULT FALSE;
  DECLARE FechaHoy date DEFAULT DATE(NOW());
  DECLARE newHoraFinalizacion time;

  -- Validacion de campos 
  IF pIdUsuario IS NULL
    OR pIdActividad IS NULL
    OR pIdEspacio IS NULL
    OR pHoraInicio IS NULL
    OR pHoraFinalizacion IS NULL
    OR pFechaInicio IS NULL
    OR (pDia = ' '
    OR pDia IS NULL) THEN
    SELECT
      ErrorDatosVacios;
  ELSE
    IF pHoraInicio < pHoraFinalizacion THEN -- Asegurar de que la hora de inicio sea menor que la hora final
      IF pFechaFin IS NULL THEN -- Una fecha
        SET temp = TRUE;
      ELSE
        IF pFechaInicio <= pFechaFin THEN
          SET temp = TRUE;
        ELSE
          SELECT
            'La Fecha de inicio no puede mayor a la fecha de finalizacion';
        END IF;
      END IF;
    ELSE
      SELECT
        'La hora de inicio no puede mayor a la hora de finalizacion';
    END IF;
  END IF;


  -- ============================================================================================================================
  -- CREAR del horario
  IF temp = TRUE THEN
    SET newHoraFinalizacion = DATE_SUB(pHoraFinalizacion, INTERVAL 1 SECOND);
    IF pFechaFin IS NULL THEN -- Una fecha
      CALL sp_metodo_horario_validateExistencia_edit(pIdHorario, pFechaInicio, pFechaInicio, pHoraInicio, newHoraFinalizacion, pIdEspacio, pDia, @estadoPrevio, @estadoActual, @estadoPosterior, @estadoGlobal);
      IF @estadoPrevio = TRUE
        OR @estadoActual = TRUE
        OR @estadoPosterior = TRUE
        OR @estadoGlobal = TRUE THEN
        SELECT
          ErrorDatosExistentes;
      ELSE
        UPDATE tabla_horario
        SET IdActividad = pIdActividad,
            IdEspacio = pIdEspacio,
            HoraInicio = pHoraInicio,
            HoraFinalizacion = pHoraFinalizacion,
            FechaInicio = pFechaInicio,
            FechaFin = pFechaFin,
            Dia = pDia,
            Estado = pEstado,
            FechaActivacion = pFechaActivacion
        WHERE IdHorario = pIdHorario;
        SELECT
          DatosRegistrados;
      END IF;

    ELSE -- Una rango de fecha
      CALL sp_metodo_horario_validateExistencia_edit(pIdHorario, pFechaInicio, pFechaFin, pHoraInicio, newHoraFinalizacion, pIdEspacio, pDia, @estadoPrevio, @estadoActual, @estadoPosterior, @estadoGlobal);

      IF @estadoPrevio = TRUE
        OR @estadoActual = TRUE
        OR @estadoPosterior = TRUE
        OR @estadoGlobal = TRUE THEN
        SELECT
          ErrorDatosExistentes;
      ELSE
        UPDATE tabla_horario
        SET IdActividad = pIdActividad,
            IdEspacio = pIdEspacio,
            HoraInicio = pHoraInicio,
            HoraFinalizacion = pHoraFinalizacion,
            FechaInicio = pFechaInicio,
            FechaFin = pFechaFin,
            Dia = pDia,
            Estado = pEstado,
            FechaActivacion = pFechaActivacion
        WHERE IdHorario = pIdHorario;
        SELECT
          DatosRegistrados;
      END IF;
    END IF;
  END IF;
END
$$

--
-- Create procedure `sp_metodo_horario_validateExistencia_create`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_metodo_horario_validateExistencia_create (IN pfechaInicio date, IN pfechaFin date, IN pHoraInicio time, IN pHoraFin time, IN pIdEspacio int, IN pDia varchar(15), OUT estadoPrevio tinyint(1), OUT estadoActual tinyint(1), OUT estadoPosterior tinyint(1), OUT estadoGlobal tinyint(1))
BEGIN
  DECLARE FechaHoy date DEFAULT DATE(NOW());
  DECLARE FechaPrevio date DEFAULT DATE_SUB(pfechaInicio, INTERVAL 3 MONTH);
  DECLARE FechaPost date DEFAULT DATE_ADD(pfechaFin, INTERVAL 3 MONTH);
  DECLARE HoraPre time DEFAULT DATE_SUB(pHoraInicio, INTERVAL 5 HOUR);
  DECLARE HoraPost time DEFAULT DATE_ADD(pHoraFin, INTERVAL 5 HOUR);

  -- Previo fecha
  IF EXISTS (SELECT
        *
      FROM tabla_horario th
      WHERE th.IdEspacio = pIdEspacio
      AND LOWER(th.Dia) = LOWER(pDia)
      AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
      AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)) THEN
    -- Prev hora
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
      SET estadoPrevio = TRUE;
    -- Actual hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)
        AND th.HoraInicio >= pHoraInicio
        AND th.HoraFinalizacion <= pHoraFin) THEN
      SET estadoPrevio = TRUE;
    -- Posterior hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)
        AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoPrevio = TRUE;
    -- Pre act pos hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaInicio AND pfechaFin)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoPrevio = TRUE;
    ELSE
      SET estadoPrevio = FALSE;
    END IF;
  ELSE
    SET estadoPrevio = FALSE;
  END IF;

  -- Actual fecha
  IF EXISTS (SELECT
        *
      FROM tabla_horario th
      WHERE th.IdEspacio = pIdEspacio
      AND LOWER(th.Dia) = LOWER(pDia)
      AND th.FechaInicio >= pfechaInicio
      AND th.FechaFin <= pfechaFin) THEN
    -- Prev hora
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio >= pfechaInicio
        AND th.FechaFin <= pfechaFin
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
      SET estadoActual = TRUE;
    -- Actual hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio >= pfechaInicio
        AND th.FechaFin <= pfechaFin
        AND th.HoraInicio >= pHoraInicio
        AND th.HoraFinalizacion <= pHoraFin) THEN
      SET estadoActual = TRUE;
    -- Posterior hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio >= pfechaInicio
        AND th.FechaFin <= pfechaFin
        AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoActual = TRUE;
    -- Pre act pos hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio >= pfechaInicio
        AND th.FechaFin <= pfechaFin
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoActual = TRUE;
    ELSE
      SET estadoActual = FALSE;
    END IF;
  ELSE
    SET estadoActual = FALSE;
  END IF;
  -- Posterior
  IF EXISTS (SELECT
        *
      FROM tabla_horario th
      WHERE th.IdEspacio = pIdEspacio
      AND LOWER(th.Dia) = LOWER(pDia)
      AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
      AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)) THEN
    -- Prev hora
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
      SET estadoPosterior = TRUE;
    -- Actual hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND th.HoraInicio >= pHoraInicio
        AND th.HoraFinalizacion <= pHoraFin) THEN
      SET estadoPosterior = TRUE;
    -- Posterior hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoPosterior = TRUE;
    -- Pre act pos hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN pfechaInicio AND pfechaFin)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoPosterior = TRUE;

    ELSE
      SET estadoPosterior = FALSE;
    END IF;
  ELSE
    SET estadoPosterior = FALSE;
  END IF;

  -- Pre act pos
  IF EXISTS (SELECT
        *
      FROM tabla_horario th
      WHERE th.IdEspacio = pIdEspacio
      AND LOWER(th.Dia) = LOWER(pDia)
      AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
      AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)) THEN
    -- Prev hora
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
      SET estadoGlobal = TRUE;
    -- Actual hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND th.HoraInicio >= pHoraInicio
        AND th.HoraFinalizacion <= pHoraFin) THEN
      SET estadoGlobal = TRUE;
    -- Posterior hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoGlobal = TRUE;
    -- Pre act pos hora
    ELSEIF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND (th.FechaInicio BETWEEN FechaPrevio AND pfechaInicio)
        AND (th.FechaFin BETWEEN pfechaFin AND FechaPost)
        AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
        AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
      SET estadoGlobal = TRUE;
    ELSE
      SET estadoGlobal = FALSE;
    END IF;
  ELSE
    SET estadoGlobal = FALSE;
  END IF;

  -- Una fecha 
  IF pfechaInicio = pfechaFin THEN
    -- Global con solo una fecha
    IF EXISTS (SELECT
          *
        FROM tabla_horario th
        WHERE th.IdEspacio = pIdEspacio
        AND LOWER(th.Dia) = LOWER(pDia)
        AND th.FechaInicio = pfechaInicio) THEN

      IF EXISTS (SELECT
            *
          FROM tabla_horario th
          WHERE th.IdEspacio = pIdEspacio
          AND LOWER(th.Dia) = LOWER(pDia)
          AND th.FechaInicio = pfechaInicio
          AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
          AND (th.HoraFinalizacion BETWEEN pHoraInicio AND pHoraFin)) THEN
        SET estadoGlobal = TRUE;
      -- Actual hora
      ELSEIF EXISTS (SELECT
            *
          FROM tabla_horario th
          WHERE th.IdEspacio = pIdEspacio
          AND LOWER(th.Dia) = LOWER(pDia)
          AND th.FechaInicio = pfechaInicio
          AND th.HoraInicio >= pHoraInicio
          AND th.HoraFinalizacion <= pHoraFin) THEN
        SET estadoGlobal = TRUE;
      -- Posterior hora
      ELSEIF EXISTS (SELECT
            *
          FROM tabla_horario th
          WHERE th.IdEspacio = pIdEspacio
          AND LOWER(th.Dia) = LOWER(pDia)
          AND th.FechaInicio = pfechaInicio
          AND (th.HoraInicio BETWEEN pHoraInicio AND pHoraFin)
          AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
        SET estadoGlobal = TRUE;
      -- Pre act pos hora
      ELSEIF EXISTS (SELECT
            *
          FROM tabla_horario th
          WHERE th.IdEspacio = pIdEspacio
          AND LOWER(th.Dia) = LOWER(pDia)
          AND th.FechaInicio = pfechaInicio
          AND (th.HoraInicio BETWEEN HoraPre AND pHoraInicio)
          AND (th.HoraFinalizacion BETWEEN pHoraFin AND HoraPost)) THEN
        SET estadoGlobal = TRUE;
      ELSE
        SET estadoGlobal = FALSE;
      END IF;
    ELSE
      SET estadoGlobal = FALSE;
    END IF;
  END IF;

--   SELECT
--     estadoPrevio,
--     estadoActual,
--     estadoPosterior,
--     estadoGlobal;
END
$$

--
-- Create procedure `sp_create_horario`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_horario (IN pIdUsuario int, IN pIdActividad int, IN pIdEspacio int, IN pHoraInicio time, IN pHoraFinalizacion time, IN pFechaInicio date, IN pFechaFin date, IN pDia varchar(15), IN pEstado tinyint(1), IN pFechaActivacion datetime)
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesarios';
  DECLARE ErrorDatosExistentes varchar(80) DEFAULT 'Existen registros que impiden introducir la actividad al sistema.';
  DECLARE DatosRegistrados varchar(50) DEFAULT 'Registrado correctamente';
  DECLARE temp tinyint DEFAULT FALSE;
  DECLARE FechaHoy date DEFAULT DATE(NOW());
  DECLARE newHoraFinalizacion time;

  -- Validacion de campos 
  IF pIdUsuario IS NULL
    OR pIdActividad IS NULL
    OR pIdEspacio IS NULL
    OR pHoraInicio IS NULL
    OR pHoraFinalizacion IS NULL
    OR pFechaInicio IS NULL
    OR (pDia = ' '
    OR pDia IS NULL) THEN
    SELECT
      ErrorDatosVacios;
  ELSE
    IF (FechaHoy <= pFechaInicio) THEN -- Asegurar de NO sea una fecha pasada
      IF pHoraInicio < pHoraFinalizacion THEN -- Asegurar de que la hora de inicio sea menor que la hora final
        IF pFechaFin IS NULL THEN -- Una fecha
          SET temp = TRUE;
        ELSE
          IF pFechaInicio <= pFechaFin THEN
            SET temp = TRUE;
          ELSE
            SELECT
              'La Fecha de inicio no puede mayor a la fecha de finalizacion';
          END IF;
        END IF;
      ELSE
        SELECT
          'La hora de inicio no puede mayor a la hora de finalizacion';
      END IF;
    ELSE -- mensaje de fecha pasada
      SELECT
        'No puede ingresar una fecha pasada';
    END IF;
  END IF;


  -- ============================================================================================================================
  -- CREAR del horario
  IF temp = TRUE THEN
    SET newHoraFinalizacion = DATE_SUB(pHoraFinalizacion, INTERVAL 1 SECOND);
    IF pFechaFin IS NULL THEN -- Una fecha
      CALL sp_metodo_horario_validateExistencia_create(pFechaInicio, pFechaInicio, pHoraInicio, newHoraFinalizacion, pIdEspacio, pDia, @estadoPrevio, @estadoActual, @estadoPosterior, @estadoGlobal);
      IF @estadoPrevio = TRUE
        OR @estadoActual = TRUE
        OR @estadoPosterior = TRUE
        OR @estadoGlobal = TRUE THEN
        SELECT
          ErrorDatosExistentes;
      ELSE
        INSERT INTO tabla_horario (IdUsuario, IdActividad, IdEspacio, HoraInicio, HoraFinalizacion, FechaInicio, FechaFin, Dia, Estado, FechaActivacion)
          VALUE (pIdUsuario, pIdActividad, pIdEspacio, pHoraInicio, pHoraFinalizacion, pFechaInicio, pFechaFin, pDia, pEstado, pFechaActivacion);
        SELECT
          DatosRegistrados;
      END IF;

    ELSE -- Una rango de fecha
      CALL sp_metodo_horario_validateExistencia_create(pFechaInicio, pFechaFin, pHoraInicio, newHoraFinalizacion, pIdEspacio, pDia, @estadoPrevio, @estadoActual, @estadoPosterior, @estadoGlobal);

      IF @estadoPrevio = TRUE
        OR @estadoActual = TRUE
        OR @estadoPosterior = TRUE
        OR @estadoGlobal = TRUE THEN
        SELECT
          ErrorDatosExistentes;
      ELSE
        INSERT INTO tabla_horario (IdUsuario, IdActividad, IdEspacio, HoraInicio, HoraFinalizacion, FechaInicio, FechaFin, Dia, Estado, FechaActivacion)
          VALUE (pIdUsuario, pIdActividad, pIdEspacio, pHoraInicio, pHoraFinalizacion, pFechaInicio, pFechaFin, pDia, pEstado, pFechaActivacion);
        SELECT
          DatosRegistrados;
      END IF;
    END IF;
  END IF;
END
$$

--
-- Create procedure `sp_getall_horario`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_horario ()
BEGIN
  SELECT
    th.IdHorario,
    th.FechaInicio,
    th.FechaFin,
    th.HoraInicio,
    th.HoraFinalizacion,
    th.Dia,
    th.Estado,
    th.IdEspacio,
    te.Nombre,
    th.IdActividad,
    ta.Nombre,
    th.IdHorario,
    tu.Nombre,
    tu.Ape1

  FROM tabla_horario th,
       tabla_usuario tu,
       tabla_actividad ta,
       tabla_espacio te
  WHERE th.IdUsuario = tu.IdUsuario
  AND th.IdActividad = ta.IdActividad
  AND th.IdEspacio = te.IdEspacio;
END
$$

--
-- Create procedure `sp_get_horario_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_horario_by_id (IN pIdHorario int)
BEGIN
  SELECT
    th.IdHorario,
    th.FechaInicio,
    th.FechaFin,
    th.HoraInicio,
    th.HoraFinalizacion,
    th.Dia,
    th.Estado,
    th.IdEspacio,
    te.Nombre,
    th.IdActividad,
    ta.Nombre,
    th.IdHorario,
    tu.Nombre,
    tu.Ape1

  FROM tabla_horario th,
       tabla_usuario tu,
       tabla_actividad ta,
       tabla_espacio te
  WHERE th.IdUsuario = tu.IdUsuario
  AND th.IdActividad = ta.IdActividad
  AND th.IdEspacio = te.IdEspacio
  AND th.IdHorario = pIdHorario;
END
$$

--
-- Create procedure `sp_delete_horario`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_horario (IN pIdHorario int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';

  IF NOT EXISTS (SELECT
        *
      FROM dbglobal.tabla_horario
      WHERE IdHorario = pIdHorario) THEN
    SELECT
      DatoNotFound;
  ELSE
    DELETE
      FROM tabla_horario
    WHERE IdHorario = pIdHorario;
    SELECT
      DatosEliminados;
  END IF;



END
$$

DELIMITER ;

--
-- Create table `tabla_tipo_activo`
--
CREATE TABLE tabla_tipo_activo (
  IdTipoActivo int NOT NULL AUTO_INCREMENT,
  Nombre varchar(50) NOT NULL,
  Descripcion varchar(100) DEFAULT NULL,
  PRIMARY KEY (IdTipoActivo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

DELIMITER $$

--
-- Create procedure `sp_getall_tipo_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_tipo_activo ()
BEGIN
  SELECT
    IdTipoActivo,
    Nombre,
    Descripcion
  FROM tabla_tipo_activo;
END
$$

--
-- Create procedure `sp_get_tipo_activo_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_tipo_activo_by_id (IN pIdTipoActivo int)
BEGIN
  SELECT
    tta.IdTipoActivo,
    tta.Nombre,
    tta.Descripcion
  FROM tabla_tipo_activo tta
  WHERE tta.IdTipoActivo = pIdTipoActivo;
END
$$

--
-- Create procedure `sp_edit_tipo_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_tipo_activo (IN pIdTipoActivo int, IN pNombre varchar(50), IN pDescripcion varchar(100))
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'Ya existe un registro con un mismo nombre';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdTipoActivo IS NULL
    OR pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        IdTipoActivo
      FROM dbglobal.tabla_tipo_activo
      WHERE IdTipoActivo = pIdTipoActivo) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM dbglobal.tabla_tipo_activo
      WHERE LOWER(Nombre) = LOWER(pNombre)
      AND IdTipoActivo != pIdTipoActivo) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE dbglobal.tabla_tipo_activo
    SET Nombre = pNombre,
        Descripcion = pDescripcion
    WHERE IdTipoActivo = pIdTipoActivo;
    SELECT
      DatosActualizado;
  END IF;

END
$$

--
-- Create procedure `sp_delete_tipo_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_tipo_activo (IN pIdTipoActivo int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';

  IF NOT EXISTS (SELECT
        IdTipoActivo
      FROM dbglobal.tabla_tipo_activo
      WHERE IdTipoActivo = pIdTipoActivo) THEN
    SELECT
      DatoNotFound;
  ELSE
    DELETE
      FROM tabla_tipo_activo
    WHERE IdTipoActivo = pIdTipoActivo;
    SELECT
      DatosEliminados;
  END IF;

END
$$

--
-- Create procedure `sp_create_tipo_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_tipo_activo (IN pNombre varchar(50), IN pDescripcion varchar(100))
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'registre los datos necesarios';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'registro ya existe';
  DECLARE DatosRegistrados varchar(50) DEFAULT 'registrado correctamente';
  IF pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM dbglobal.tabla_tipo_activo
      WHERE LOWER(Nombre) = LOWER(pNombre)) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO dbglobal.tabla_tipo_activo (Nombre, Descripcion)
      VALUES (pNombre, pDescripcion);
    SELECT
      DatosRegistrados;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_activo`
--
CREATE TABLE tabla_activo (
  IdActivo int NOT NULL AUTO_INCREMENT,
  IdTipoActivo int NOT NULL,
  Nombre varchar(100) NOT NULL,
  PRIMARY KEY (IdActivo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE tabla_activo
ADD CONSTRAINT tabla_activo_ibfk_1 FOREIGN KEY (IdTipoActivo)
REFERENCES tabla_tipo_activo (IdTipoActivo);

DELIMITER $$

--
-- Create procedure `sp_getall_tabla_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_tabla_activo ()
BEGIN
  SELECT
    ta.IdActivo,
    ta.Nombre,
    tta.IdTipoActivo,
    tta.Nombre AS 'TipoActivo'
  FROM tabla_activo ta,
       tabla_tipo_activo tta
  WHERE ta.IdTipoActivo = tta.IdTipoActivo;
END
$$

--
-- Create procedure `sp_get_activo_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_activo_by_id (IN pIdActivo int)
BEGIN
  SELECT
    ta.IdActivo,
    ta.Nombre,
    tta.IdTipoActivo,
    tta.Nombre AS 'TipoActivo'
  FROM tabla_activo ta,
       tabla_tipo_activo tta
  WHERE ta.IdActivo = pIdActivo
  AND ta.IdTipoActivo = tta.IdTipoActivo;
END
$$

--
-- Create procedure `sp_edit_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_activo (IN pIdActivo int, IN pIdTipoActivo int, IN pNombre varchar(100))
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'Ya existe un registro con un mismo nombre';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdActivo IS NULL
    OR pIdTipoActivo IS NULL
    OR pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        IdActivo
      FROM dbglobal.tabla_activo
      WHERE IdActivo = pIdActivo) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM dbglobal.tabla_activo ta
      WHERE LOWER(Nombre) = LOWER(pNombre)
      AND IdActivo != pIdActivo) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE dbglobal.tabla_activo
    SET IdTipoActivo = pIdTipoActivo,
        Nombre = pNombre
    WHERE IdActivo = pIdActivo;
    SELECT
      DatosActualizado;
  END IF;

END
$$

--
-- Create procedure `sp_delete_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_activo (IN pIdActivo int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';

  IF NOT EXISTS (SELECT
        IdTipoActivo
      FROM dbglobal.tabla_activo
      WHERE IdActivo = pIdActivo) THEN
    SELECT
      DatoNotFound;
  ELSE
    DELETE
      FROM tabla_activo
    WHERE IdActivo = pIdActivo;
    SELECT
      DatosEliminados;
  END IF;
END
$$

--
-- Create procedure `sp_create_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_activo (IN pIdTipoActivo int, IN pNombre varchar(100))
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'registre los datos necesarios';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'registro ya existe';
  DECLARE DatosRegistrados varchar(50) DEFAULT 'registrado correctamente';

  IF pIdTipoActivo IS NULL
    OR pNombre = '' THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF EXISTS (SELECT
        Nombre
      FROM dbglobal.tabla_activo
      WHERE LOWER(Nombre) = LOWER(pNombre)) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO dbglobal.tabla_activo (IdTipoActivo, Nombre)
      VALUES (pIdTipoActivo, pNombre);
    SELECT
      DatosRegistrados;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_espacio_activo`
--
CREATE TABLE tabla_espacio_activo (
  IdEspacio_activo int NOT NULL AUTO_INCREMENT,
  IdEspacio int NOT NULL,
  IdActivo int NOT NULL,
  Cantidad int DEFAULT NULL,
  PRIMARY KEY (IdEspacio_activo)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

--
-- Create foreign key
--
ALTER TABLE tabla_espacio_activo
ADD CONSTRAINT FK_tabla_espacio_activo_ibfk_1 FOREIGN KEY (IdEspacio)
REFERENCES tabla_espacio (IdEspacio);

--
-- Create foreign key
--
ALTER TABLE tabla_espacio_activo
ADD CONSTRAINT FK_tabla_espacio_activo_ibfk_2 FOREIGN KEY (IdActivo)
REFERENCES tabla_activo (IdActivo);

DELIMITER $$

--
-- Create procedure `sp_getall_espacio_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_getall_espacio_activo ()
BEGIN
  SELECT
    tea.IdEspacio_activo,
    tea.IdEspacio,
    te.Nombre AS 'Espacio',
    tea.IdActivo,
    ta.Nombre AS 'Activo',
    tea.Cantidad
  FROM tabla_espacio_activo tea,
       tabla_activo ta,
       tabla_espacio te
  WHERE tea.IdEspacio = te.IdEspacio
  AND tea.IdActivo = ta.IdActivo;
END
$$

--
-- Create procedure `sp_get_espacio_activo_by_id`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_get_espacio_activo_by_id (IN pIdEspacioActivo int)
BEGIN
  SELECT
    tea.IdEspacio_activo,
    tea.IdEspacio,
    te.Nombre AS 'Espacio',
    tea.IdActivo,
    ta.Nombre AS 'Activo',
    tea.Cantidad
  FROM tabla_espacio_activo tea,
       tabla_activo ta,
       tabla_espacio te
  WHERE tea.IdEspacio = te.IdEspacio
  AND tea.IdActivo = ta.IdActivo
  AND tea.IdEspacio_activo = pIdEspacioActivo;
END
$$

--
-- Create procedure `sp_edit_espacio_Activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_edit_espacio_Activo (IN pIdEspacioActivo int, IN pIdEspacio int, IN pIdActivo int, IN pCantidad int)
BEGIN
  DECLARE DatosActualizado varchar(50) DEFAULT 'Datos actualizados correctamente';
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'Registre los datos necesario';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'Ya existe un registro con estos datos';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';


  IF pIdEspacioActivo IS NULL
    OR pIdEspacio IS NULL
    OR pIdActivo IS NULL THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF NOT EXISTS (SELECT
        IdEspacio_activo
      FROM dbglobal.tabla_espacio_activo
      WHERE IdEspacio_activo = pIdEspacioActivo) THEN
    SELECT
      DatoNotFound;
  ELSEIF EXISTS (SELECT
        IdEspacio,
        IdActivo
      FROM dbglobal.tabla_espacio_activo
      WHERE IdEspacio = pIdEspacio
      AND IdActivo = pIdActivo
      AND IdEspacio_activo != pIdEspacioActivo) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    UPDATE dbglobal.tabla_espacio_activo
    SET IdEspacio = pIdEspacio,
        IdActivo = pIdActivo,
        Cantidad = pCantidad
    WHERE IdEspacio_activo = pIdEspacioActivo;
    SELECT
      DatosActualizado;
  END IF;
END
$$

--
-- Create procedure `sp_delete_espacio_Activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_delete_espacio_Activo (IN pIdEspacioActivo int)
BEGIN
  DECLARE DatosEliminados varchar(50) DEFAULT 'Eliminado correctamente';
  DECLARE DatoNotFound varchar(50) DEFAULT 'Dato no encontrado';

  IF NOT EXISTS (SELECT
        tea.IdEspacio_activo
      FROM dbglobal.tabla_espacio_activo tea
      WHERE tea.IdEspacio_activo = pIdEspacioActivo) THEN
    SELECT
      DatoNotFound;
  ELSE
    DELETE
      FROM tabla_espacio_activo
    WHERE IdEspacio_activo = pIdEspacioActivo;
    SELECT
      DatosEliminados;
  END IF;
END
$$

--
-- Create procedure `sp_create_espacio_activo`
--
CREATE
DEFINER = 'root'@'localhost'
PROCEDURE sp_create_espacio_activo (IN pIdEspacio int, IN pIdActivo int, IN pCantidad int)
BEGIN
  DECLARE ErrorDatosVacios varchar(50) DEFAULT 'registre los datos necesarios';
  DECLARE ErrorDatosExistentes varchar(50) DEFAULT 'registro ya existe';
  DECLARE DatosRegistrados varchar(50) DEFAULT 'registrado correctamente';

  IF pIdEspacio IS NULL
    OR pIdActivo IS NULL THEN
    SELECT
      ErrorDatosVacios;
  ELSEIF EXISTS (SELECT
        IdEspacio,
        IdActivo
      FROM dbglobal.tabla_espacio_activo
      WHERE IdEspacio = pIdEspacio
      AND IdActivo = pIdActivo) THEN
    SELECT
      ErrorDatosExistentes;
  ELSE
    INSERT INTO dbglobal.tabla_espacio_activo (IdEspacio, IdActivo, Cantidad)
      VALUES (pIdEspacio, pIdActivo, pCantidad);
    SELECT
      DatosRegistrados;
  END IF;
END
$$

DELIMITER ;

--
-- Create table `tabla_historial`
--
CREATE TABLE tabla_historial (
  IdHistorial int NOT NULL AUTO_INCREMENT,
  Fecha datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  Descripcion varchar(255) NOT NULL,
  PRIMARY KEY (IdHistorial)
)
ENGINE = INNODB,
AUTO_INCREMENT = 26,
AVG_ROW_LENGTH = 1092,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_0900_ai_ci;

-- 
-- Dumping data for table tabla_campus
--
INSERT INTO tabla_campus VALUES
(15, 'Nicoya', 'Nicoya', 'por ahi', '26804343');

-- 
-- Dumping data for table tabla_tipo_espacio
--
INSERT INTO tabla_tipo_espacio VALUES
(7, 'Aula', '');

-- 
-- Dumping data for table tabla_edificio
--
INSERT INTO tabla_edificio VALUES
(10, 15, 'SODA');

-- 
-- Dumping data for table tabla_departamento
--
INSERT INTO tabla_departamento VALUES
(6, 'Recreacion');

-- 
-- Dumping data for table tabla_tipo_activo
--
INSERT INTO tabla_tipo_activo VALUES
(1, 'Muebles', 'ss');

-- 
-- Dumping data for table tabla_usuario
--
INSERT INTO tabla_usuario VALUES
(1, 'Admin', '501210321', 'Carlos', 'Lopez', NULL, NULL, NULL, '2000-07-13');

-- 
-- Dumping data for table tabla_actividad
--
INSERT INTO tabla_actividad VALUES
(5, 'Mates', 'ALGEBRA', 'SS');

-- 
-- Dumping data for table tabla_espacio
--
INSERT INTO tabla_espacio VALUES
(1, 10, 7, 6, 'Aula 01', 1, 30, 1),
(3, 10, 7, 6, 'Aula 03', 1, 30, 0);

-- 
-- Dumping data for table tabla_activo
--
INSERT INTO tabla_activo VALUES
(1, 1, 'SIS');

-- 
-- Dumping data for table tabla_horario
--
INSERT INTO tabla_horario VALUES
(1, 1, 5, 3, '08:00:00', '11:00:00', '2022-10-17', '2022-10-21', 'Lunes', 1, NULL),
(2, 1, 5, 3, '13:00:00', '17:00:00', '2022-10-17', '2022-10-21', 'Martes', 1, NULL),
(3, 1, 5, 3, '08:00:00', '11:00:00', '2022-10-24', '2022-10-28', 'Lunes', 1, NULL),
(4, 1, 5, 3, '08:00:00', '11:00:00', '2022-10-19', '2022-10-26', 'Lunes', 1, NULL),
(5, 1, 5, 1, '08:00:00', '11:00:00', '2022-10-25', '2022-10-27', 'Lunes', 1, NULL),
(6, 1, 5, 1, '13:00:00', '17:00:00', '2022-10-25', '2022-10-27', 'Lunes', 1, NULL),
(7, 1, 5, 1, '13:00:00', '17:00:00', '2022-10-31', '2022-11-07', 'Lunes', 1, NULL);

-- 
-- Dumping data for table tabla_historial
--
INSERT INTO tabla_historial VALUES
(6, '2022-10-17 17:23:12', 'Se ha insertado un edificio. Id: 26 Nombre: Edificio prueba xd'),
(11, '2022-10-17 18:00:41', 'Se ha actualizado un edificio. Id:26 Campus: 15 -> 15 Nombre: Nombre cambiado X3 -> Nombre ultracambiado'),
(12, '2022-10-17 18:04:08', 'Se ha eliminado un edificio.  Id: 27 Nombre: Edificio prueba a'),
(13, '2022-10-17 18:10:42', 'Se ha insertado un departamento.  Id: 7 Nombre: Prueba'),
(14, '2022-10-17 18:18:02', 'Se ha actualizado un departamento. Id:7 Nombre: Prueba -> Test'),
(15, '2022-10-17 18:23:09', 'Se ha eliminado un departamento. Id: 7 Nombre: Test'),
(16, '2022-10-17 18:29:38', 'Se ha insertado un usuario.  Id: 3DNI: 100100123 Nombre: Test Nomb'),
(17, '2022-10-17 18:45:10', 'Se ha actualizado un usuario. Id:3 DNI: 100100123 -> 080909089 Nombre: Test Nomb -> Change Telefono: 28808008 -> 1111111 Correo: correo@correo.com -> nuevo@nuevo.com'),
(18, '2022-10-17 18:48:49', 'Se ha eliminado un usuario.  Id: 3 DNI: 080909089 Nombre: Change'),
(19, '2022-10-17 18:55:21', 'Se ha insertado un espacio.  Id: 5 Nombre: AulaTrigger'),
(20, '2022-10-17 19:01:21', 'Se ha actualizado un espacio. Id:3 Nombre: Aula 03 -> Aula Cambio Estado: 0 -> 1 Capacidad: 30 -> 25 Tipo: 7 -> 7'),
(21, '2022-10-17 19:06:06', 'Se ha eliminado un espacio.  Id: 5 Nombre: AulaTrigger'),
(22, '2022-10-17 19:12:42', 'Se ha insertado un tipo de espacio.  Id: 8 Nombre: Test'),
(23, '2022-10-17 19:13:19', 'Se ha actualizado un tipo de espacio. Id:8 Nombre: Test -> Cammbio'),
(24, '2022-10-17 19:13:35', 'Se ha eliminado un tipo de espacio.  Id: 8 Nombre: Cammbio'),
(25, '2022-10-18 16:08:24', 'Se ha eliminado un horario.  Id: 8 Actividad: 5 Usuario 1');

-- 
-- Dumping data for table tabla_espacio_activo
--
INSERT INTO tabla_espacio_activo VALUES
(1, 1, 1, 30),
(3, 3, 1, 32);

--
-- Set default database
--
USE dbglobal;

DELIMITER $$

--
-- Create trigger `tr_usuario_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_usuario_update
AFTER UPDATE
ON tabla_usuario
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un usuario. ', 'Id:', OLD.IdUsuario, ' DNI: ', OLD.DNI, ' -> ', NEW.DNI, ' Nombre: ', OLD.Nombre, ' -> ', NEW.Nombre, ' Telefono: ', OLD.Telefono, ' -> ', NEW.Telefono, ' Correo: ', OLD.EmailInst, ' -> ', NEW.EmailInst));
END
$$

--
-- Create trigger `tr_usuario_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_usuario_insert
AFTER INSERT
ON tabla_usuario
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un usuario. ', ' Id: ', NEW.IdUsuario, ' DNI: ', NEW.DNI, ' Nombre: ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_usuario_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_usuario_delete
AFTER DELETE
ON tabla_usuario
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un usuario. ', ' Id: ', OLD.IdUsuario, ' DNI: ', OLD.DNI, ' Nombre: ', OLD.Nombre));
END
$$

--
-- Create trigger `tr_tipo_espacio_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_tipo_espacio_update
AFTER UPDATE
ON tabla_tipo_espacio
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un tipo de espacio. ', 'Id:', OLD.IdTipoEspacio, ' Nombre: ', OLD.Nombre, ' -> ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_tipo_espacio_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_tipo_espacio_insert
AFTER INSERT
ON tabla_tipo_espacio
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un tipo de espacio. ', ' Id: ', NEW.IdTipoEspacio, ' Nombre: ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_tipo_espacio_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_tipo_espacio_delete
AFTER DELETE
ON tabla_tipo_espacio
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un tipo de espacio. ', ' Id: ', OLD.IdTipoEspacio, ' Nombre: ', OLD.Nombre));
END
$$

--
-- Create trigger `tr_tipoActivo_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_tipoActivo_update
AFTER UPDATE
ON tabla_tipo_activo
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un tipo de activo. ', ' Id: ', OLD.IdTipoActivo, ' Nombre: ', OLD.Nombre, ' -> ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_tipoActivo_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_tipoActivo_insert
AFTER INSERT
ON tabla_tipo_activo
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un tipo de activo. ', ' Id: ', NEW.IdTipoActivo, ' Nombre: ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_tipoActivo_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_tipoActivo_delete
AFTER DELETE
ON tabla_tipo_activo
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un tipo de activo. ', ' Id: ', OLD.IdTipoActivo, ' Nombre: ', OLD.Nombre));
END
$$

--
-- Create trigger `tr_horario_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_horario_update
AFTER UPDATE
ON tabla_horario
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un horario. ', ' Id: ', OLD.IdHorario, ' Actividad: ', OLD.IdActividad, ' Usuario ', OLD.IdUsuario));
END
$$

--
-- Create trigger `tr_horario_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_horario_insert
AFTER INSERT
ON tabla_horario
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un horario. ', ' Id: ', NEW.IdHorario, ' Usuario: ', NEW.IdUsuario, ' Actividad: ', NEW.IdActividad, ' Espacio: ', NEW.IdEspacio));
END
$$

--
-- Create trigger `tr_horario_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_horario_delete
AFTER DELETE
ON tabla_horario
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un horario. ', ' Id: ', OLD.IdHorario, ' Actividad: ', OLD.IdActividad, ' Usuario ', OLD.IdUsuario));
END
$$

--
-- Create trigger `tr_espacio_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_espacio_update
AFTER UPDATE
ON tabla_espacio
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un espacio. ', 'Id:', OLD.IdEspacio, ' Nombre: ', OLD.Nombre, ' -> ', NEW.Nombre, ' Estado: ', OLD.EstadoEspacio, ' -> ', NEW.EstadoEspacio, ' Capacidad: ', OLD.CapacidadMAx, ' -> ', NEW.CapacidadMAx, ' Tipo: ', OLD.IdTipoEspacio, ' -> ', NEW.IdTipoEspacio));
END
$$

--
-- Create trigger `tr_espacio_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_espacio_insert
AFTER INSERT
ON tabla_espacio
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un espacio. ', ' Id: ', NEW.IdEspacio, ' Nombre: ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_espacio_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_espacio_delete
AFTER DELETE
ON tabla_espacio
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un espacio. ', ' Id: ', OLD.IdEspacio, ' Nombre: ', OLD.Nombre));
END
$$

--
-- Create trigger `tr_espacioActivo_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_espacioActivo_update
AFTER UPDATE
ON tabla_espacio_activo
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un dato a la tabla espacio activo ', ' Id: ', OLD.IdEspacio_activo, ' Activo: ', OLD.IdActivo, ' -> ', NEW.IdActivo, ' Espacio: ', OLD.IdEspacio, ' -> ', NEW.IdEspacio, 'Cantidad:', OLD.Cantidad, ' -> ', NEW.Cantidad));
END
$$

--
-- Create trigger `tr_espacioActivo_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_espacioActivo_insert
AFTER INSERT
ON tabla_espacio_activo
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un dato a la tabla espacio activo ', ' Id: ', NEW.IdEspacio_activo, ' Activo: ', NEW.IdActivo, ' Espacio: ', NEW.IdEspacio, 'Cantidad:', NEW.Cantidad));
END
$$

--
-- Create trigger `tr_espacioActivo_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_espacioActivo_delete
AFTER DELETE
ON tabla_espacio_activo
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un dato a la tabla espacio activo ', ' Id: ', OLD.IdEspacio_activo, ' Activo: ', OLD.IdActivo, ' Espacio: ', OLD.IdEspacio));
END
$$

--
-- Create trigger `tr_edificio_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_edificio_update
AFTER UPDATE
ON tabla_edificio
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un edificio. ', 'Id:', OLD.IdEdificio, ' Campus: ', OLD.IdCampus, ' -> ', NEW.IdCampus, ' Nombre: ', OLD.Nombre, ' -> ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_edificio_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_edificio_insert
AFTER INSERT
ON tabla_edificio
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un edificio. ', ' Id: ', NEW.IdEdificio, ' Nombre: ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_edificio_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_edificio_delete
AFTER DELETE
ON tabla_edificio
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un edificio. ', ' Id: ', OLD.IdEdificio, ' Nombre: ', OLD.Nombre));
END
$$

--
-- Create trigger `tr_departamento_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_departamento_update
AFTER UPDATE
ON tabla_departamento
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un departamento. ', 'Id:', OLD.IdDepartamento, ' Nombre: ', OLD.Nombre, ' -> ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_departamento_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_departamento_insert
AFTER INSERT
ON tabla_departamento
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un departamento. ', ' Id: ', NEW.IdDepartamento, ' Nombre: ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_departamento_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_departamento_delete
AFTER DELETE
ON tabla_departamento
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un departamento.', ' Id: ', OLD.IdDepartamento, ' Nombre: ', OLD.Nombre));
END
$$

--
-- Create trigger `tr_campus_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_campus_update
AFTER UPDATE
ON tabla_campus
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un campus. ', ' Id: ', OLD.IdCampus, ' Nombre: ', OLD.Nombre, ' -> ', NEW.Nombre, ' Sede: ', OLD.Sede, ' -> ', NEW.Sede, ' Dirección: ', OLD.Direccion, ' -> ', NEW.Direccion));
END
$$

--
-- Create trigger `tr_campus_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_campus_insert
AFTER INSERT
ON tabla_campus
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un campus. ', ' Id: ', NEW.IdCampus, ' Nombre: ', NEW.Nombre));
END
$$

--
-- Create trigger `tr_campus_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_campus_delete
AFTER DELETE
ON tabla_campus
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un campus. ', ' Id: ', OLD.IdCampus, ' Nombre: ', OLD.Nombre, ' Sede: ', OLD.Sede, ' Dirección: ', OLD.Direccion));
END
$$

--
-- Create trigger `tr_activo_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_activo_update
AFTER UPDATE
ON tabla_activo
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado un activo. ', ' Id: ', OLD.IdActivo, ' Nombre: ', OLD.Nombre, ' -> ', NEW.Nombre, ' Tipo Activo ', OLD.IdTipoActivo, ' -> ', NEW.IdTipoActivo));
END
$$

--
-- Create trigger `tr_activo_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_activo_insert
AFTER INSERT
ON tabla_activo
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado un activo. ', ' Id: ', NEW.IdActivo, ' Nombre: ', NEW.Nombre, ' Tipo Activo ', NEW.IdTipoActivo));
END
$$

--
-- Create trigger `tr_activo_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_activo_delete
AFTER DELETE
ON tabla_activo
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado un activo. ', ' Id: ', OLD.IdActivo, ' Nombre: ', OLD.Nombre, ' Tipo Activo ', OLD.IdTipoActivo));
END
$$

--
-- Create trigger `tr_actividad_update`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_actividad_update
AFTER UPDATE
ON tabla_actividad
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha actualizado una actividad. ', ' Id: ', OLD.IdActividad, ' Nombre: ', OLD.Nombre, ' -> ', NEW.Nombre, ' Tipo actividad: ', OLD.TipoActividad, ' -> ', NEW.TipoActividad));
END
$$

--
-- Create trigger `tr_actividad_insert`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_actividad_insert
AFTER INSERT
ON tabla_actividad
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha insertado una actividad. ', ' Id: ', NEW.IdActividad, ' Nombre: ', NEW.Nombre, ' Tipo actividad: ', NEW.TipoActividad));
END
$$

--
-- Create trigger `tr_actividad_delete`
--
CREATE
DEFINER = 'root'@'localhost'
TRIGGER tr_actividad_delete
AFTER DELETE
ON tabla_actividad
FOR EACH ROW
BEGIN
  INSERT INTO tabla_historial (Descripcion)
    VALUE (CONCAT('Se ha eliminado una actividad. ', ' Id: ', OLD.IdActividad, ' Nombre: ', OLD.Nombre, ' Tipo actividad: ', OLD.TipoActividad));
END
$$

DELIMITER ;

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;